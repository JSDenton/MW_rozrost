# Form implementation generated from reading ui file 'main_window.ui'
#
# Created by: PyQt6 UI code generator 6.3.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from plane import plane
import random

class Ui_MainWindow(object):
    space = plane(820, 740, 5)
    colors = []

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1100, 900)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")   

        
        self.scene = QtWidgets.QGraphicsScene()
        self.canvas = QtWidgets.QGraphicsView(self.scene, self.centralwidget)
        self.canvas.setGeometry(QtCore.QRect(40, 50, 820, 740))
        self.canvas.setObjectName("canvas")
        self.image = QtGui.QImage(820, 740, QtGui.QImage.Format.Format_RGB32)

        #self.scene.addItem(self.image)        
        
        self.comboBox_neighourhood = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_neighourhood.setGeometry(QtCore.QRect(890, 70, 141, 22))
        self.comboBox_neighourhood.setObjectName("comboBox_neighourhood")
        self.comboBox_neighourhood.addItem("")
        self.comboBox_neighourhood.addItem("")
        self.comboBox_neighourhood.addItem("")
        self.comboBox_neighourhood.addItem("")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(890, 50, 141, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(890, 120, 151, 16))
        self.label_2.setObjectName("label_2")
        self.comboBox_distribution = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_distribution.setGeometry(QtCore.QRect(890, 140, 141, 22))
        self.comboBox_distribution.setObjectName("comboBox_distribution")
        self.comboBox_distribution.addItem("")
        self.comboBox_distribution.addItem("")
        self.comboBox_distribution.addItem("")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(890, 190, 151, 16))
        self.label_3.setObjectName("label_3")
        self.comboBox_boundaries = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_boundaries.setGeometry(QtCore.QRect(890, 210, 141, 22))
        self.comboBox_boundaries.setObjectName("comboBox_boundaries")
        self.comboBox_boundaries.addItem("")
        self.comboBox_boundaries.addItem("")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(890, 260, 55, 16))
        self.label_4.setObjectName("label_4")
        self.spinBox_width = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_width.setGeometry(QtCore.QRect(890, 280, 61, 22))
        self.spinBox_width.setObjectName("spinBox_width")
        self.spinBox_width.setMaximum(820)
        self.spinBox_width.setProperty("value", 820)
        self.spinBox_height = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_height.setGeometry(QtCore.QRect(970, 280, 61, 22))
        self.spinBox_height.setObjectName("spinBox_height")
        self.spinBox_height.setMaximum(740)
        self.spinBox_height.setProperty("value", 740)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(890, 360, 131, 16))
        self.label_5.setObjectName("label_5")
        self.spinBox_nucleon_count = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_nucleon_count.setGeometry(QtCore.QRect(890, 380, 61, 22))
        self.spinBox_nucleon_count.setMaximum(100)
        self.spinBox_nucleon_count.setObjectName("spinBox_nucleon_count")
        self.spinBox_nucleon_count.setProperty("value", 30)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(890, 310, 141, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_start = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_start.setGeometry(QtCore.QRect(890, 430, 141, 28))
        self.pushButton_start.setObjectName("pushButton_start")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1093, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionSave_picture_as = QtGui.QAction(MainWindow)
        self.actionSave_picture_as.setObjectName("actionSave_picture_as")
        self.actionExit = QtGui.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.menuFile.addAction(self.actionSave_picture_as)
        self.menuFile.addAction(self.actionExit)
        self.menubar.addAction(self.menuFile.menuAction())

        self.pushButton_start.clicked.connect(self.start_simulation)
        self.pushButton.clicked.connect(self.generate_space)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.comboBox_neighourhood.setItemText(0, _translate("MainWindow", "von Neumann"))
        self.comboBox_neighourhood.setItemText(1, _translate("MainWindow", "Moore"))
        self.comboBox_neighourhood.setItemText(2, _translate("MainWindow", "Pentagonal"))
        self.comboBox_neighourhood.setItemText(3, _translate("MainWindow", "Hexagonal"))
        self.label.setText(_translate("MainWindow", "Neighbourhood type"))
        self.label_2.setText(_translate("MainWindow", "Nucleon distribution type"))
        self.comboBox_distribution.setItemText(0, _translate("MainWindow", "Random"))
        self.comboBox_distribution.setItemText(1, _translate("MainWindow", "Custom"))
        self.comboBox_distribution.setItemText(2, _translate("MainWindow", "Regular"))
        self.label_3.setText(_translate("MainWindow", "Boundary condition type"))
        self.comboBox_boundaries.setItemText(0, _translate("MainWindow", "Absolute"))
        self.comboBox_boundaries.setItemText(1, _translate("MainWindow", "Periodic"))
        self.label_4.setText(_translate("MainWindow", "Size"))
        self.label_5.setText(_translate("MainWindow", "Nucleon count"))
        self.pushButton.setText(_translate("MainWindow", "Generate space"))
        self.pushButton_start.setText(_translate("MainWindow", "Start simulation"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionSave_picture_as.setText(_translate("MainWindow", "Save picture as"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))

        self.generate_space()

    def generate_space(self):
        x = self.spinBox_width.value()
        y = self.spinBox_height.value()

        self.space = plane(x=x, y=y, color_num=self.spinBox_nucleon_count.value())
        
        self.canvas.setGeometry(QtCore.QRect(40, 50, x, y))
        self.scene.setSceneRect(QtCore.QRectF(40, 50, x, y))
        self.image = QtGui.QImage(x, y, QtGui.QImage.Format.Format_RGB32)
        

        #get colors for nucleons
        self.colors = []
        for i in range(self.spinBox_nucleon_count.value()):
            self.colors.append(QtGui.QColor(random.randint(0,255),random.randint(0,255),random.randint(0,255)))
            #print(f"{self.pens[i].color().red()} {self.pens[i].color().green()} {self.pens[i].color().blue()}")
              
        self.space.generate_space(self.spinBox_nucleon_count.value(), self.comboBox_distribution.currentText(), self)
        print("going to refresh")
        self.refresh_canvas()

        for i in range(y-1):
            for j in range(x-1):
                if self.space.space[i][j].id!=0:
                    print(f"{i}, {j}, seed")
                

    def start_simulation(self):
        _translate = QtCore.QCoreApplication.translate
        self.pushButton_start.setText(_translate("MainWindow", "Stop simulation"))
        self.pushButton_start.clicked.connect(self.stop_simulation)
        
        self.space.main_loop(type=self.comboBox_neighourhood.currentText(), boundaries_type=self.comboBox_boundaries.currentText(), refresh=self.refresh_canvas)
    
    def stop_simulation(self):
        _translate = QtCore.QCoreApplication.translate
        self.pushButton_start.setText(_translate("MainWindow", "Start simulation"))
        self.pushButton_start.clicked.connect(self.start_simulation)

    def refresh_canvas(self):
        print(self.space.color_counts)
        for i in range(self.space.height-1):
                for j in range(self.space.width-1):
                    if self.space.space[i][j].id!=0:
                        self.image.setPixel(i, j, self.colors[self.space.space[i][j].id].rgb())
                        #print(f"{i} {j}")   
                        
        self.scene.addPixmap(QtGui.QPixmap.fromImage(self.image))      
        self.scene.update()
        
                        #TODO: finish this - find the way to refresh and draw on canvas

    #TODO: add a method that allows for custom nucleon picking
    